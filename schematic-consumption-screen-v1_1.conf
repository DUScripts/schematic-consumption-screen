{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hide()\nunit.setTimer(\"t\",1)\n\ncontainer = nil\ndatabank = nil\nscreen = nil\ncore = nil\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getClass\n    then\n        if slot.getClass():lower():find(\"container\") then\n            container = slot\n        end\n        if slot.getClass():lower() == 'screenunit' then\n            screen = slot\n        end\n        if slot.getClass():lower() == 'databankunit' then\n            databank = slot\n        end\n        if slot.getClass():lower():find(\"coreunit\") then\n            core = slot\n        end\n    end\nend\n\nexit = false\nif screen == nil then\n    system.print(\"No Screen Detected\"); exit = true\nend\nif container == nil then\n    system.print(\"No Container Detected\"); exit = true\nend\nif databank == nil then\n    system.print(\"No Databank Detected\"); exit = true\nend\nif core == nil then\n    system.print(\"No Core Detected\"); exit = true\nend\nif exit then\n    unit.exit()\nend\n\nfunction mysplit(inputstr, sep)\n   if sep == nil then\n      sep = \"%s\"\n   end\n   local t={}\n   for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n      table.insert(t, str)\n   end\n   return t\nend\n\nfunction getSize(name)\n    local nameN = \"\"\n    if name:find(\"XSE\") or name:find(\"XSS\") then -- \"XSElement\" or \"XSSchematic\"\n        nameN = \" XS\"\n    elseif name:find(\"SE\") or name:find(\"SS\") then\n        nameN = \" S\"\n    elseif name:find(\"ME\") or name:find(\"MS\") then\n        nameN = \" M\"\n    elseif name:find(\"XLE\") or name:find(\"XLS\") then\n        nameN = \" XL\"\n    elseif name:find(\"LE\") or name:find(\"LS\") then\n        nameN = \" L\"\n    end\n    return nameN\nend\n\nfunction getTier(name)\n    local nameN = \"\"\n    if name:find(\"1\") then\n        nameN = \"Tier 1\"\n    elseif name:find(\"2\") then\n        nameN = \"Tier 2\"\n    elseif name:find(\"3\") then\n        nameN = \"Tier 3\"\n    elseif name:find(\"4\") then\n        nameN = \"Tier 4\"\n    elseif name:find(\"5\") then\n        nameN = \"Tier 5\"\n    end\n    return nameN\nend\n\nfunction getShortName(name)\n    local nameN = \"\"\n    \n    if name:find(\"Tier\") then\n        nameN = getTier(name)\n        if name:find(\"ctH\") then\n            nameN = nameN..\" Prod. Hon.\"\n        elseif name:find(\"ctM\") then\n            nameN = nameN..\" Prod. Mat.\"\n        elseif name:find(\"reH\") then\n            nameN = nameN..\" Pure Hon.\"\n        elseif name:find(\"reM\") then\n            nameN = nameN..\" Pure Mat.\"\n        elseif name:find(\"ammo\") then\n            nameN = nameN..\" Ammo\"\n        elseif name:find(\"Scrap\") then\n            nameN = nameN..\" Scrap\"\n        end\n    elseif name:find(\"Core\") then\n        nameN = \"Core\"\n    elseif name:find(\"pp\") then\n        nameN = \"Support\"\n    elseif name:find(\"Terr\") then\n        nameN = \"Terr. unit\"\n    elseif name:find(\"pB\") then\n        nameN = \"Warp Beacon\"\n    elseif name:find(\"pC\") then\n        nameN = \"Warp cell\"\n    elseif name:find(\"cF\") then\n        nameN = \"Atmo fuel\"\n    elseif name:find(\"ceF\") then\n        nameN = \"Space fuel\"\n    elseif name:find(\"etF\") then\n        nameN = \"Rocket fuel\"\n    elseif name:find(\"Bonsai\") then\n        nameN = \"Bonsai\"\n    end\n    nameN = nameN..getSize(name)\n    return nameN\nend\n\nfunction compareSaveTime(shift)\n    return utils.round(24-shift/3600,0.1)\nend\n\nitemList = \"\"\n\nfunction addItemInList(n,name,dl,itemX)\n    local part = [[\n    \nstep = ]].. n+1 ..[[\n    \naddText(layer,font,\"]]..name..[[\",x*1,y*(wide*step))\naddLine(layer,0,y*(wide*step+1),x*100,y*(wide*step+1))\naddText(layer,font,\"]]..itemX[2]..[[\",x*20,y*(wide*step))\naddText(layer,font,\"]]..itemX[5]..[[\",x*28,y*(wide*step))\naddText(layer,font,\"]]..compareSaveTime(itemX[3])..'H'..[[\",x*35,y*(wide*step))\naddText(layer,font,\"]]..dl..[[\",x*42,y*(wide*step))\n    ]]\n    itemList = itemList..part\nend\n\nfunction addItemInList2(n,name,dl,itemX)\n    local part = [[\n    \nstep = ]].. n+1 ..[[\n    \naddText(layer,font,\"]]..name..[[\",x*51,y*(wide*step))\naddLine(layer,0,y*(wide*step+1),x*100,y*(wide*step+1))\naddText(layer,font,\"]]..itemX[2]..[[\",x*70,y*(wide*step))\naddText(layer,font,\"]]..itemX[5]..[[\",x*78,y*(wide*step))\naddText(layer,font,\"]]..compareSaveTime(itemX[3])..'H'..[[\",x*85,y*(wide*step))\naddText(layer,font,\"]]..dl..[[\",x*92,y*(wide*step))\n    ]]\n    itemList = itemList..part\nend\n\n\n-- itemX[1]=num;[2]=count;[3]shortest time shift from -1day;[4]that shifts items count\n-- [5]count difference\nitems = {}\ncontItems = {}\n\n\neList = core.getElementIdList()\nstorageIdList= {}\ninitIndex = 0\ninitFinished = false\n--Nested Coroutines by Jericho\ncoroutinesTable  = {}\n--all functions here will become a coroutine\nMyCoroutines = {\n    function()\n        if not initFinished and #contItems > 0 then\n            for n,itemTable in ipairs(contItems) do\n                local item = system.getItem(itemTable[\"id\"])\n                if item[\"name\"]:find(\"Copy\") then\n                    --system.print(itemTable[\"id\"])\n                    local nameX = getShortName(item[\"name\"])\n                    local itemX = {n,utils.round(itemTable[\"quantity\"],1),0,0,0}\n                    if items[nameX] == nil then\n                        items[nameX] = itemX\n                    else\n                        items[nameX][2] = items[nameX][2] + itemX[2]\n                    end\n                    --system.print(system.getArkTime())\n                end\n            end\n            system.print(\"Loading contructs elements (\" .. #eList .. \" elements detected)\")\n            for i = 1, #eList, 1 do\n                initIndex = i\n                local idN = eList[i]\n                if core.getElementClassById(idN):lower():sub(1,8) == \"industry\" then\n                    local info = core.getElementIndustryInfoById(idN)\n                    for m,idN in pairs(info[\"requiredSchematicIds\"]) do\n                        local shortName = getShortName(system.getItem(idN)[\"name\"])\n                        local countX = 0\n                        if info[\"state\"] ~= 2 then\n                            countX = info[\"requiredSchematicAmount\"]\n                        end\n                        if items[shortName] == nil then\n                            local x = 1\n                            for _,_ in pairs(items) do x = x+1 end\n                            items[shortName] = {x,-countX,0,0,0}\n                            else\n                            if items[shortName][2] < 0 then\n                            items[shortName][2] = items[shortName][2] -countX\n                            end\n                        end\n                    end\n                end\n                if (i%100) == 0 then\n                    --system.print(i .. \" elements scanned\")\n                    coroutine.yield(coroutinesTable[1])\n                end\n            end\n            if initIndex == #eList then\n                system.print(#eList .. \" elements scanned\")\n                initFinished = true\n                \n                local timeNow = system.getArkTime()\n                local keyList = databank.getKeyList()\n                for n,keyN in pairs(keyList) do\n                    if keyN == \"lastSave\" then\n                        system.print(#keyList..' '..keyN..' '..databank.getFloatValue(keyN))\n                    end\n                    local spl = mysplit(keyN,'_') -- [1]name_[2]ArkTime\n                    if spl[2] then\n                        spl[2]=tonumber(spl[2])\n                        if spl[1] == \"Tier 2 XS\" then\n                            system.print(keyN..' '..databank.getIntValue(keyN))\n                        end\n                        if spl[2] > timeNow -172800 then -- if data not older than 2days (in seconds)\n                            local itemX = items[spl[1]]\n                            \n                            if itemX ~= nil then\n                                if itemX[3] == 0 then\n                                    items[spl[1]][3] = spl[2]\n                                    items[spl[1]][4] = databank.getIntValue(keyN)\n                                else\n                                    local tShift = math.abs(spl[2] -(timeNow -86400))\n                                    if tShift < itemX[3] then\n                                        items[spl[1]][3] = tShift\n                                        items[spl[1]][4] = databank.getIntValue(keyN)\n                                    end\n                                end\n                            end\n                            \n                        else\n                            databank.clearValue(keyN)\n                        end\n                    end\n                end\n                \n                local save = false\n                if databank.getFloatValue(\"lastSave\") < (timeNow -3600) and #contItems > 0 then\n                    save = true\n                end\n                for name,itemN in pairs(items) do\n                    if save then\n                        databank.setIntValue(name..\"_\"..timeNow,itemN[2])\n                    end\n                    if itemN[4] > 0 then\n                        itemN[5] = itemN[2] - itemN[4]\n                    end\n                    local dl=0\n                    if itemN[5] < 0 then\n                        dl = -utils.round(itemN[2]/itemN[5],0.1)\n                    end\n                    if itemN[1] < 20 then\n                        addItemInList(itemN[1],name,dl,itemN)\n                    else\n                        addItemInList2(itemN[1] -19,name,dl,itemN)\n                    end\n                end\n                if save then\n                    databank.setFloatValue(\"lastSave\",timeNow)\n                end\n                screenScript = [[\n                rx,ry = getResolution()\n                x,y = rx/100,ry/100\n                layer = createLayer()\n                font=loadFont('Play', y*3)\n\n                setDefaultFillColor(layer,Shape_Box,0.045,0.055,0.066,1)\n                setDefaultFillColor(layer,Shape_Text,0.710,0.878,0.941,1)\n                setDefaultStrokeColor(layer,Shape_Line,0.02,0.02,0.02,1)\n                setDefaultStrokeWidth(layer,Shape_Line,x*0.4)\n\n                addBox(layer,0,0,x*100,y*100)\n                addLine(layer,x*19.5,y*0,x*19.5,y*100)\n                addLine(layer,x*27.5,y*0,x*27.5,y*100)\n                addLine(layer,x*34.5,y*0,x*34.5,y*100)\n                addLine(layer,x*41.5,y*0,x*41.5,y*100)\n                addLine(layer,x*69.5,y*0,x*69.5,y*100)\n                addLine(layer,x*77.5,y*0,x*77.5,y*100)\n                addLine(layer,x*84.5,y*0,x*84.5,y*100)\n                addLine(layer,x*91.5,y*0,x*91.5,y*100)\n                setNextStrokeWidth(layer,x*1)\n                setNextStrokeColor(layer,0.210,0.378,0.541,1)\n                addLine(layer,0,y*1,x*100,y*1)\n                wide = 5\n\n                step = 1\n                addText(layer,font,\"Name\",x*1,y*(wide*step))\n                addText(layer,font,\"Count\",x*20,y*(wide*step))\n                addText(layer,font,\"Change\",x*28,y*(wide*step))\n                addText(layer,font,\"Save\",x*35,y*(wide*step))\n                addText(layer,font,\"DaysLeft\",x*42,y*(wide*step))\n                addText(layer,font,\"Name\",x*51,y*(wide*step))\n                addText(layer,font,\"Count\",x*70,y*(wide*step))\n                addText(layer,font,\"Change\",x*78,y*(wide*step))\n                addText(layer,font,\"Save\",x*85,y*(wide*step))\n                addText(layer,font,\"DaysLeft\",x*92,y*(wide*step))\n                addLine(layer,0,y*(wide*step+1),x*100,y*(wide*step+1))\n                ]]..itemList..[[\n\n                setNextStrokeColor(layer,0.210,0.378,0.541,1)\n                addLine(layer,x*50,y*0,x*50,y*100)\n                ]]\n                screen.setRenderScript(screenScript)\n                unit.exit()\n            end\n        end\n    end\n}\n\nfunction initCoroutines()\n    for _,f in pairs(MyCoroutines) do\n        local co = coroutine.create(f)\n        table.insert(coroutinesTable, co)\n    end\nend\n\ninitCoroutines()\n\nrunCoroutines = function()\n    for i,co in ipairs(coroutinesTable) do\n        if coroutine.status(co) == \"dead\" then\n            coroutinesTable[i] = coroutine.create(MyCoroutines[i])\n        end\n        if coroutine.status(co) == \"suspended\" then\n            assert(coroutine.resume(co))\n        end\n    end\nend\n\nMainCoroutine = coroutine.create(runCoroutines)\n--[[getElementIndustryInfoById === fields {[integer] state, [bool] stopRequested, \n    [list] requiredSchematicIds, [integer] requiredSchematicAmount, \n    [integer] unitsProduced, [integer] remainingTime, [integer] batchesRequested, \n    [integer] batchesRemaining, [number] maintainProductAmount, [integer] currentProductAmount, \n    [table] currentProducts:{{[integer] id, [number] quantity},...}}]]\n\n\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"sec = container.updateContent()\ncontItems = container.getContent()\nsystem.print(\"updateContent \"..sec)\nif sec <= 0 or #contItems > 0 then\n    system.print(\"contItems \"..#contItems)\nend","filter":{"args":[{"value":"t"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"if coroutine.status(MainCoroutine) == \"dead\" then\n    MainCoroutine = coroutine.create(runCoroutines)\nend\nif coroutine.status(MainCoroutine) == \"suspended\" then\n    assert(coroutine.resume(MainCoroutine))\nend","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"2"}],"methods":[],"events":[]}
